
#include "fifteen.h"

fifteen::fifteen(){
	size_t counter = 1;
	for(size_t i = 0; i < dimension; ++i)
			for(size_t j = 0; j < dimension; j++){
					if((i+1) * (j+1) == (dimension * dimension)){
							table[i][j] = 0;
							open_i = i;
							open_j = j;
							break;
					}
					table[i][j] = counter;
					counter++;
			}
}

fifteen::fifteen(std::initializer_list< std::initializer_list< size_t >> init){
		size_t i = 0, j = 0;
		for(auto it = init.begin(); it != init.end(); ++i, ++it){
				for(auto jt = it->begin(); jt != it->end(); ++j, ++jt){
						table[i][j] = *(jt);
						if(table[i][j] == 0){
								open_i = i;
								open_j = j;
						}
				}
				j = 0;
		}
}

std::ostream& operator << ( std::ostream& stream, const fifteen& f ){
	for(size_t i = 0; i < f.dimension; ++i){
			for(size_t j = 0; j < f.dimension; ++j){
					stream << std::setw(10) << f.table[i][j] << " ";
			}
			stream << std::endl;
	}
	return stream;
}

using position = std::pair< size_t, size_t > ;

position fifteen::solvedposition( size_t val ){
		position result;
		size_t counter = 1;
		for(size_t i = 0; i < dimension; ++i){
				for(size_t j = 0; j < dimension; ++j){
						if(val == counter){
								result.first = i;
								result.second = j;
								return result;
						}
						counter++;
				}
		}
		result.first = 0;
		result.second = 0;
		return result;
}

size_t fifteen::hashvalue( ) const{
		size_t hash = 1;
		for(size_t i = 0; i < dimension; ++i){
				for(size_t j = 0; j < dimension; ++j){
						size_t tmp = table[i][j];
						tmp *= i;
						tmp += i;
						tmp *= j;
						tmp -= j;
						hash *= tmp;
				}
		}
		return hash;
}
bool fifteen::equals( const fifteen& other ) const{
		if(this->dimension != other.dimension)
				return false;
		for(size_t i = 0; i < dimension; ++i)
				for(size_t j = 0; j < dimension; ++j){
						if(other.table[i][j] != table[i][j])
								return false;
				}
	return true;
}

bool fifteen::issolved( ) const{
		size_t counter = 1;
		for(size_t i = 0; i < dimension; ++i)
				for(size_t j = 0; j < dimension; ++j){
						if(i == dimension - 1 && j == dimension - 1)
								return true;
						if(table[i][j] != counter)
								return false;
						counter++;
				}
	return true;
}
void fifteen::makemove( move m ){
		switch(m){
				case move::up:
				if(open_i == 0 >= dimension){
					throw(illegalmove(m));
				}
				else{
					size_t val = table[open_i-1][open_j];
					table[open_i-1][open_j] = 0;
					table[open_i][open_j] = val;
					open_i--;
				}
				break;
				case move::down:
				if(open_i+1 == dimension)
						throw(illegalmove(m));
				else{
					size_t val = table[open_i+1][open_j];
					table[open_i+1][open_j] = 0;
					table[open_i][open_j] = val;
					open_i++;
				}
				break;
				case move::left:
				if(open_j == 0)
						throw(illegalmove(m));
				else{
					size_t val = table[open_i][open_j-1];
					table[open_i][open_j-1] = 0;
					table[open_i][open_j] = val;
					open_j--;
				}
				break;
				case move::right:
				if(open_j + 1 == dimension)
						throw(illegalmove(m));
				else{
					size_t val = table[open_i][open_j+1];
					table[open_i][open_j+1] = 0;
					table[open_i][open_j] = val;
					open_j++;
				}
				break;
				default:
				break;
		}
}

size_t fifteen::distance( ) const{
		size_t result = 0;
		position pos = { dimension - 1, dimension - 1 };
		position open = { open_i, open_j };
		result += distance(open, pos);
		for(size_t i = 1; i < dimension*dimension; ++i){
			pos = this->solvedposition(i);
			for(size_t ii = 0; ii < dimension; ++ii){
				bool breaks = false;
				for(size_t jj = 0; jj < dimension; ++jj){
					if(i == table[ii][jj]){
						open.first = ii;
						open.second = jj;
						result += distance(open,pos);
						breaks = true;
						break;	
					}		
				}
				if(breaks)
					break;
			}
		}
		return result;
}














