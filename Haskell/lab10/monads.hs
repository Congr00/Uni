{-# LANGUAGE DeriveFunctor #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE DeriveGeneric, AllowAmbiguousTypes, ScopedTypeVariables, TemplateHaskell, FlexibleContexts #-}


module Monads {- ? -} where

import Generic.Random
import Test.QuickCheck
import Prelude hiding (Monad, return) -- note: not hiding (>>=)

class (Functor m) => Monad m where
  return :: a -> m a
  join :: m (m a) -> m a

-------------------------
-- Kill-all list monad(?)
-------------------------

isSingle :: [a] -> Bool
isSingle [a] = True
isSingle _   = False

trivial :: [[a]] -> Bool
trivial [xs] = True
trivial xss  = all isSingle xss

newtype KAList a = KAList { unKAList :: [a] }
  deriving (Functor, Eq)

instance (Show a) => Show (KAList a) where
  show (KAList xs) = show xs

instance Monad KAList where
  return x = KAList [x]
  join (KAList xss) = KAList $ if
    | trivial xss' -> concat xss'
    | otherwise    -> []
   where
    xss' = map unKAList xss

instance (Eq a, Arbitrary a) => Arbitrary (KAList a) where
    arbitrary = KAList <$> arbitrary

prop_1_KA :: KAList Int -> Bool
prop_1_KA list = (join . fmap return) list == (id list)

prop_2_KA :: KAList Int -> Bool
prop_2_KA list = (join . return) list == (id list)

prop_3_KA :: KAList (KAList (KAList Int)) -> Bool
prop_3_KA list = (join . fmap join) list == ((join . join) list)

test_KAList_1 = quickCheck prop_1_KA
test_KAList_2 = quickCheck prop_2_KA
test_KAList_3 = quickCheck prop_3_KA


-- Postaw ptaszka:
-- [✔] Monada
-- [ ] Nie monada
--
-- Jeśli nie monada, to wpisz kontrprzykład: 


--------------------------------
-- Kill singletons list monad(?)
--------------------------------

newtype KSList a = KSList { unKSList :: [a] }
  deriving (Functor, Eq)

instance (Show a) => Show (KSList a) where
  show (KSList xs) = show xs

instance Monad KSList where
  return x = KSList [x]
  join (KSList xss) = KSList $ if
    | trivial xss' -> concat xss'
    | otherwise    -> concat $ filter (not . isSingle) xss'
   where
    xss' = map unKSList xss

instance (Eq a, Arbitrary a) => Arbitrary (KSList a) where
    arbitrary = KSList <$> arbitrary

prop_1_KS :: KSList Int -> Bool
prop_1_KS list = (join . fmap return) list == (id list)

prop_2_KS :: KSList Int -> Bool
prop_2_KS list = (join . return) list == (id list)

prop_3_KS :: KSList (KSList (KSList Int)) -> Bool
prop_3_KS list = (join . fmap join) list == ((join . join) list)

test_KSList_1 = quickCheck prop_1_KS
test_KSList_2 = quickCheck prop_2_KS
test_KSList_3 = quickCheck prop_3_KS

-- Postaw ptaszka:
-- [ ] Monada
-- [✔] Nie monada
--
-- Jeśli nie monada, to wpisz kontrprzykład: 
--[[[],[0],[3]],[[3,0,-2,0,2]],[[-2,-5],[-2,0,4,2]]]

----------------------------
-- Kill primes list monad(?)
----------------------------

isPrime :: Int -> Bool
isPrime n = all (\k -> n `mod` k /= 0) $ takeWhile (\k -> k*k <= n) primes
  
primes :: [Int]
primes = 2 : [n | n <- [3,5..], isPrime n]

newtype KPList a = KPList { unKPList :: [a] }
  deriving (Functor, Eq)

instance (Show a) => Show (KPList a) where
  show (KPList xs) = show xs

instance Monad KPList where
  return x = KPList [x]
  join (KPList xss) = KPList $ if
    | trivial xss'                -> concat xss'
    | any null xss'               -> []
    | isPrime (length xss')       -> []
    | any (isPrime . length) xss' -> []
    | otherwise                   -> concat xss'
   where
    xss' = map unKPList xss

instance (Eq a, Arbitrary a) => Arbitrary (KPList a) where
    arbitrary = KPList <$> arbitrary

prop_1_KP :: KPList Int -> Bool
prop_1_KP list = (join . fmap return) list == (id list)

prop_2_KP :: KPList Int -> Bool
prop_2_KP list = (join . return) list == (id list)

prop_3_KP :: KPList (KPList (KPList Int)) -> Bool
prop_3_KP list = (join . fmap join) list == ((join . join) list)

test_KPList_1 = quickCheck prop_1_KP
test_KPList_2 = quickCheck prop_2_KP
test_KPList_3 = quickCheck prop_3_KP

-- Postaw ptaszka:
-- [✔] Monada
-- [ ] Nie monada
--
-- Jeśli nie monada, to wpisz kontrprzykład: 


-----------------------
-- Palindromad monad(?)
-----------------------

palindromize :: [a] -> [a]
palindromize xs = xs ++ reverse (init xs)

newtype Palindromad a = Palindromad { unPalindromad :: [a] }
  deriving (Functor, Eq)

instance (Show a) => Show (Palindromad a) where
  show (Palindromad xs) = show xs

instance Monad Palindromad where
  return x = Palindromad [x]
  join (Palindromad xss) = Palindromad $ if
    | null xss      -> []
    | any null xss' -> []
    | otherwise     -> (init xss' >>= palindromize) ++ last xss'
   where
    xss' = map unPalindromad xss

instance (Eq a, Arbitrary a) => Arbitrary (Palindromad a) where
    arbitrary = Palindromad <$> arbitrary

prop_1_Palindromad :: Palindromad Int -> Bool
prop_1_Palindromad list = (join . fmap return) list == (id list)

prop_2_Palindromad :: Palindromad Int -> Bool
prop_2_Palindromad list = (join . return) list == (id list)

prop_3_Palindromad :: Palindromad (Palindromad (Palindromad Int)) -> Bool
prop_3_Palindromad list = (join . fmap join) list == ((join . join) list)

test_Palindromad_1 = quickCheck prop_1_Palindromad
test_Palindromad_2 = quickCheck prop_2_Palindromad
test_Palindromad_3 = quickCheck prop_3_Palindromad

-- Postaw ptaszka:
-- [✔] Monada
-- [ ] Nie monada
--
-- Jeśli nie monada, to wpisz kontrprzykład: 


-----------------------------
-- Short Palindromad monad(?)
-----------------------------

newtype SPalindromad a = SPalindromad { unSPalindromad :: [a] }
  deriving (Functor, Eq)

instance (Show a) => Show (SPalindromad a) where
  show (SPalindromad xs) = show xs

instance Monad SPalindromad where
  return x = SPalindromad [x]
  join (SPalindromad xss) = SPalindromad $ take 100 $ if
    | trivial xss'  -> concat xss'
    | null xss      -> []
    | any null xss' -> []
    | otherwise     -> (init xss' >>= palindromize) ++ last xss'
   where
    xss' = map unSPalindromad xss

instance (Eq a, Arbitrary a) => Arbitrary (SPalindromad a) where
    arbitrary = SPalindromad <$> arbitrary

prop_1_SPalindromad :: SPalindromad Int -> Bool
prop_1_SPalindromad list = (join . fmap return) list == (id list)

prop_2_SPalindromad :: SPalindromad Int -> Bool
prop_2_SPalindromad list = (join . return) list == (id list)

prop_3_SPalindromad :: SPalindromad (SPalindromad (SPalindromad Int)) -> Bool
prop_3_SPalindromad list = (join . fmap join) list == ((join . join) list)

test_SPalindromad_1 = quickCheck prop_1_SPalindromad
test_SPalindromad_2 = quickCheck prop_2_SPalindromad
test_SPalindromad_3 = quickCheck prop_3_SPalindromad

-- Postaw ptaszka:
-- [ ] Monada
-- [✔] Nie monada
--
-- Jeśli nie monada, to wpisz kontrprzykład: 
-- znajdowało tylko takie długie kontrprzykłady
{-
[[[-8,14,-1,-20,24,16,-1,20,24,3,-4,-23,-18,19,-24,27,24,-21],[-8,-1,18,5,2,-4,-5,6,5,-19,4,-18,-19,-26,27,-17,-2],[4,24,22,-6,-20,25,-16,-26,8,-25,-26,-8],[20,8,-3],[-3,21,-24,-16,15],[24,-25,15,-11,20,-11,21,3,-5,-8,-17,9,-15,-15,13,-27,15],[0,-6,8,-21,-11,27,-9,-17],[13,22,13,-19,21,19,10,2,3,15,25,7,11,26,3,-7,-12,-7,27],[-9],[-20,-10,7,27,-19,-23,15,7,5,11,-22,-10,-7,-27,-20,-26,-12,5],[6,15,8,-7,-9,-19,9,-18,-5,11,-18,-23,-4,5,3,22],[2,23,-17,-19,15,13,1,-6,-7,-23,-12],[27,27,11,-6,-6,-14,12,16,-11,19,19,26,2,23],[6,25,16,18,2,-21,23,10,-26,17],[-18,19,-21,2,24,5,7,-5,25,-9,22,11,-25,27,-5,26,-1,-21,20,20,19,11,-4,-12,-5,-25,-12],[2,14,-16,-21,23,-25,23,-16,-1,15,7,-15,-13],[0,15],[-24,15,-12,7,22,-3,-10,1,-24,7,-18,9,5],[-4,4,11,-22],[-3,27]],[[14,12,2,24,3,-4,5,-2,0,26,-1,24,25,10,-25,18,-24,27,-3,-8,16,6,-3,1],[-1,-19,-5,5,-4,1,-19,-13,-18,21,23,23,-1,-20,-12,-22,-5,-4,14,21,0],[-8,-5,-4,-12,-23,-23,9,4],[-20,27,6,-12,-10,21,0,-13,-25,-21,25,19,20,-13,20,6,-3,-17,-14,10,-4,9,10,-6,7,22,-24],[1,-1,24,-14,-18,13,-24,-26,16,-5,1,-10],[-3,9,11,-11,-4,6,-1,-10,8,-13,3,4,17,10,14,-10,20,-16,-22],[-2,5,-9,-11,9,-1,-12,-19,16,-24,-14,-13,27,12,24,-14,-14],[14,-25,-16,-10,-8,-24,20,11,12,0],[-10,2,21,-2,11,-12,-19,-14,3,5,-24,-18,-4,-25,21,-24,-25,24,5,9,-10,0,-17],[-4,27,19,6,-13,7,-7,-7,-13,7,9,10,23,10,-25,5,-13,-13,-2,21,16,15,-26,9],[-2,-27,-19,26,-20,-16,19,-6,5,-6,-17,9,-10,-9],[-24,-26,-10,-21],[-6,5,-27,9,-10,-18,1,11,18,21,7,25,-12,-6],[-3,-22,-9,-20,12,0,10,-20,15,23,7,0,21,-21,-5,6],[7,0,-24],[-1,-26,2,13,-1,20,24,19,-21,23,-20,-11]],[[-25,10,-7,25,22,-3,25,6,3,16],[-12,-14,15,-27,-11,2],[-5,23,-13,26,-8,-8,13,16],[0,18,-5,16,-14,20,2,9,23],[7,-3,-27,-10,-4,3,0,-6,-1,11],[-9,26,7,-2,3,-7,-25,22,2,-24,-2,18,3,-2,16,11],[-13,-11,-13,11,3,-4],[-11,10,-15,-25,-2,25,12,-1,1,-19,25,-1],[-16,-5,9,-25,13,0,23,-16,6,-14,15],[0,-5,-24,-21,-3,23,11,-8,-26],[-20],[19,-23,-12,18,-20,-17,13,-13,26,-12,-12,-5,-26,-11,10,-10,23,-22,26,1,27,-4,1,-5,5,13],[-13,-4],[-19,-24,-10,-17,1,14,-4,4,4,-26,-9,2,-24,27,14,15],[-10,10,15,-3,6,-7,9,-9,-3,-1,-21,-11,21,-20,1,-16,-21,2,-10,-6,27,-6],[18,1,-21,-9],[9,-10,-17,-26,5,-5,-14,-6,21,-9,22],[-4,-17,-4,16],[6,-10,-11,17,-19,-1,-24,-14,1,20,-3],[-27,23,-10,-3,-14,16,4,21,18,7,10,25,17],[-11,-26,20,22,20,0,-1,-27,14,4,2,-4,6,27,19,-3,-1,14,-12,26,4,-24,-23,9,-3,23],[24,-21,-21,-10,-2,11,-8,-5,-11,-2,11,-17,-9,15,-8],[-16,-23,-17,24,1,19,11,-20,-27,16,8,15,-1,23],[12,-24,24,-12,23,-11,27,-17,-8,3,-21,-7,11,-17,16,-19,11,-9,13,2,-16,-15],[-27,5,-21,-20,-19],[26,19,-15,-8,9,26,17,9,8,18,10,12,-18,-18,-23,15,-7,-24,-5,25]],[[-9],[-5,-2,-19,23,-17,-24,14,25,5,-23,11,-17,-27,-19,20,-25,-23,20,-9],[-21,23,-22,-7,0,18,10,-9,-24,-24,8],[17,-19,-7,8,4,21,-27,20,-21,-15,23,24,3,20,11,-1,11,-17,12,-13,-5,27,17],[-9,15,13],[13,-1,-21,10,-24,24,26,-23,-1,15,9,7,-12,19,26,-8,3],[19,16,-9,-7,5,14,-12,-23,-15,13,14,15,17,-9,16,27,-22,17,-3],[-4,-17,-25,-23,8,9,-7],[11,0,-7,-27,-18,-15,12],[15,14,25,-3,-15,-11,25,10,-14,9,-5,-8,18,26,-17,26]],[[-1,-3,12,-11,-26,3,12,-3,-1,11,-11,18,13,-1,-10,-8,-4,-18,-9,-18],[-3,-8,-11,-18,-1,8,-14,5,-26,8,-20,-10,9,15,13,4,24,14,26,-22,-8,19,-3,5,-6],[19,-17,22,-14,-14,20,-17,-6,1,-4,-24,-24,13,-22,4,-21],[-20,4,3,12,2,-14,18,-16,-4,6,11,15,16,0,-3,-20,15,2,-14,-17,-10],[5,-13,14,-26,7,11,-18,-17],[-13,26,-25,-19,16],[-4,-11,-18,-15,-17,27,-23,25,2,7,3,-3,-17,2,19,-26,23,-13,9],[-23,2,-5,-9,6,17,19,26,27,-16,9,14,-15,-20,13],[1],[22,-18,18,-4,-25,8,-12,-27,-8],[-24,-10,13,18,22,-5,4,-24,-15,27,-17,-11,-20,7],[4,-16,9,7,18,-3],[27,-15,-16,19,21,7,-9,15,1,4,10,1,19,-26],[5,-13],[26,-1,22,-26,23,13,12,-12,-12,-27,4,23],[20,-9,-18,-24,27,25,-15,-17,-13,-8,6,-22,-6,16,-14,8,15,24,-7],[-19,14,-19,-23,-17,21,5,-6,26,-15,27,10,26,8,25,-25,27,-15]],[[-16,9,21,0,11,20,-18,10,-13,22,9,7],[12,13,-27,-3,-7,-20,8,12,-14,-17,17,26,-25,-2,-3,7,20,-8,-21,8,19,9,15,-26,19,-24],[9,-21,-21,-10,22,-24],[16,7,-16,22,10,-20,21,16,-24,4,10,9,-18,-24,-12,-23],[-17,-23,9,-15,1,-4,-1,-9,-16,15,-3],[6,-8,-19],[15],[],[-18,-12,-7,-3,-18,-5,-23,25,-14,1,23,25,24,-18,-5,25,5,-20,25,-14,-19],[-11,18,-22,9,-14,18,7,-10,22,24,23,19,-12,-23,-13,19,21,-3,23,-12,-25,-24,-24,5,-1,-5],[18,17,9,2,20,1,6,25,-10,0],[-9,21,-7,-19,-9,-10,11,-22,-9,0,-9,-2,4,-14,-17,-2,11,12],[-9,9,-14,-17,-20],[8,27,-7,4,8,-18,15,8,-21,10,-11,18,19,5,7,20,-3,-9],[5,-25,20,1],[11],[-27,25,12,24,-24,2,3,-27,21,-8,27,8,-11,3,-1,-3],[-3,-16,-17,-13,-2,-9,-17,11,17,-3,-13,10,-2,3,22],[7,-6,23,24,20,18,-8],[16,-17,3,17,15,-19,15,21,8,19,-1,13,13,2,14,-13,-23,19,-2,9,8,11,-6,-8,-10,21]],[[20,0,9,-25,25,9,23],[6,27,22,-3,23,7,27,6,4,24,9,25,24,1,25,6],[-4,13,16,5,-24,-22,-15,24,-10,-4,18,-9,-10,-1,-11,26,-5,10,22,13],[6,26,14,-8,-13,4,-2,20,8,15,11,2,5],[14,-24,24,-26,17,-12,9,-1,-25,10,26,-5,17,4,-1,11],[-25],[14,13,16,-14,-3,-1,9,6,11,-23,23,-24,-1,-22,-9,-27,13,0,1,25,19,-27,-13],[0,14,4,27,21],[13,7,20,-4,-3,24,10,10,16,7,-8,-20,-14,-16,12,16,-8,21,27,-27,-26],[4,-14,20,-23,20,11,-18,-20,19,-21,20,6],[-14,11,-23,24,22,-10,7,8]],[[1,0,-10,-16,-12,-23,-22,-17,0,-24,11,-5,5,11,25,25,-2,-14,18,-14,-27,21],[-20,-1],[19,-25],[-6,-26,-20,-9,20,6,22,1,-12],[26,-11,-2,21,-25],[16,-22,16,1]],[[-24,-17,20,1,0,-5,-18,-17,25,3,1,2,-19,3,-3,-26,-11,15,21,-6,11,27],[-19,-4,12,-18,-4,21,-13,1,-26,5,24,17,13,23,10,-22,-24,4,8,0,24,-11],[23,23,-19,0,24,-27,19,18,20,-12,25,11,9,-17,12,-16,-20,-18,-19],[-14,8,24,-2,-19,4,24,-9,23],[26,-15,-27,19,2,22,10,22,3,-7,-26,-18,-10],[14,17,-5,2,11],[-10,7,-23],[],[-15,-8,-19,-20,-1,16,-18,-21,-4,22,7,-11,-2,-18,-25,5,4,27,16,-27],[9,0,16,-20,-10,-13,-15,0,7,21,-15,-18,25,7,-9,-1,21,-10,-9,18,-10,3,20,-4,2],[-7,15,13,-6,5,-21,20,-14,5,-22,11],[16,18,9,-9,-12,23,16,12,-27,25,-19,-12,2,-13,-23,23,-25,10,-4,23,15,-22,16,6,16,-16,6],[-2,8,-25,-8,-19,11,23,-12,17,-9,-18,7,-26,27,24,-15,26,-15,-23,-14,2,-27,20,16,-5,2,-11],[-2,-16,23,20,-19,-27,18],[21,-14,-27,0,17,-15,1,6,-15,-11,-1,-18,-27,-2,-26,7,15,9,1,2,17,-4,22,-9,-27,-25],[-16,13,21,-19,-24,1,-10,-7,23,12,19,-4,4,16,-2,-19,15,-13,25,7,-21,10,-22],[-13,-7,1,20,12,12,19,11,-4,21,26,10],[22,0,11,7,-6,7,-25,-23,26,-26,-27,-21,8,9,18,-8,15,4],[-19,12,-4,2,8,17,0,20,12,-7,13,27,24,-23,4,-21,-12,19,-15,17,-27,22,-11,-15],[6,-22,-12,-23,6,8,-5,17,-9,-12,-14,-1,-22,17,-9,17,-24,-21,22,3,20,5,-24],[-23,3,-21,6,-18,27,-1,19,-22,27,-22,18,27,26,-16,-24,15,-27,-7,-12,-7,-25],[13,1,-23,-19,-3,1,-1,-11,-6,25,-1,13,1,7,0,15,-12,20,-15,-4,3],[-8,-19,-9,-9,11,-23,0,3],[-23,20,26,-22,14,-17,-15,-8],[-23],[-20,-12,4,-21,20,17]],[[25,16,-10,25,10,0,-9,24]],[[16,4,25,-9,-27,-2,-18,9,12,19,7,-12,-7,-14,-8,-23,-5,-23,-24,21,14,19],[18,8,-23,-27,-13,1,-2,11,-24,-5,13],[-26,1,13,-24,11,12,-16,8,-7,-27],[-17,-15,0,-20,19,0,23,17,4,15,-27,15,-14,-11],[-6,5,27,-3,4,-9,8,-12,5,-6,-3,-10,-7,18,-14,-19,-24,8,12],[17,0,-9],[-8,5,-1,2,-15,24,-6,-21,24,10,-26,-6,-8,12,16,-14,11,-15,21,-20,15,9,-15,-20,17,-17],[13,-27,14,-6,-24,-24,1,24,3,23,-19,26,-16,3,-26,-1],[-5,4,2],[22,-18,2,21,21,-19,-4,-6,21,-12,5,-5,21,18,14,-16,18,-3,-18],[],[-15,-9,10,-25,-13,5,24,11,22,-9,-27,-4,-6,20,-15,26,-10,-10,-12],[-6],[-7,-9,-13,-3,-5,23,5,-25,7,9],[-19,-10,0,-22,26,-15,1,26,-16,5,9,-26,5,18],[-26,-6,4,-3,11,27,-27,-18,-10,-2,-15,-1,16,-14,12,-25,-12,-19,-6,15,-12,-27,-9,22,18,-9],[4,3,-7,-23,26,-22,-17,-7,-27,-21,11,-17,6,11,-10,-27,6,-13,2,-21,10,-10,26,-5,-24],[-23,-1,-4]],[[23,-25,1,-25,-4,-1,-12,-17,-13,10]],[[8,-6,-8,-13,22,-12,6,16,16,12,12,10,-16,-24,-23,-18,-14,16,-21,-13],[11,-4,-2,25,24,7,-8,4,-10,-11,16,16,-15,8,14,15,-3,-21],[7,-25,-6,15,27,27,-23,16,-26,27,-13,10,25,26,24,27,26,-12,-10,-19,22],[0,-8,4,11,-21],[-9,10,2,4,-1,0,0,17,-9,-14,10,-5,22,0,23,-2,21,-17,-15,23],[11,-18,-6,-7,-20,21,2,-21,-27,15,-4,4,-2,22,-11,-27,0,8,23,-4,-13,17,-11,20,26,15],[-15,20],[-26,16,-24,-17,20,-3,15,6,2,-7,-15,-15,4,-26,17,-15,7],[22,-8,-12,-26,-2],[26,-20,11,-25,17,-1,24,0,21,26,-8,10,14,14,-25,-1,17,12,6,27,2,0,-11,8,16],[-3,27,25,-24,24,10,5,8,22,-10,0,-22,-25,-12,-13,26,-10,-12,-10,-5,-16],[-21,24,26,-11,-4,-7,4,-18,-21,7,21,-1,-22,17,17,21,0,11,23,0,3,-11,0],[24,-24,19,-4],[26,5,-3,-20,14,7,12],[-23,-20,-16,1,25,6,-19,-22,-19,15,-14,-22,-23,5,-21],[-9],[12,12,-9],[5,10],[19,-10,7,23,-24,-14,-12,8,11,-26,27,26,1,-11],[-18,-25,25,-5,23,-27,11,-13,-18,26,15,-14],[-8,20,20,17,-27,10,-13,24,-5,-15,-5],[25,-7,-21,27,-2,11,18,18,7,-17,-9,-14,22,-7,-16,17,17,-21,3,25],[11,-13,-23,18],[21,12,16,-22,-23,3,-6,18,-11,0,10,17,-20,3,18,-10],[-4],[25,5]],[[26,17,-3,10,-12,-25,13],[-18,7,6,4,-6,26,-9,27,15],[25,14,21,-20,-21,-19],[21,-12,2,10,21],[20,16,-1,6,-18,1,20,25,-8,-23,16,-24,-11,17,14,2,2,-3,22,25],[12,-20,13,-24,18,8,-22,-27,14,15],[5,22,1,-7,-13,3,15,-5,-16,-22,-10,3,19,14,-12,-4],[26,-20,10,-22,25,22,-5,27,20,16,26,-15,0,-14,-4,-25,5,1,-24,27,-17,11,-2,-15],[17,-18,-27,-1,-18,10,-26,-1,-19,22,-26,-24,-10,13,18,4,24,19,-16,6,-8,3,-9,-19],[21,-15,20,-17],[21,7,14,-23,-20,13,-10,-17]]]
-}